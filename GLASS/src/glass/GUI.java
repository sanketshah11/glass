/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package glass;

import glass.Plugins.AirPollutionLogsPlugin;
import glass.Plugins.LinuxOSPlugin;
import glass.Plugins.WaterLevelPlugin;
import glass.Plugins.ServerLogPlugin;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.MouseInfo;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.border.EtchedBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import net.xeoh.plugins.base.PluginManager;
import net.xeoh.plugins.base.impl.PluginManagerFactory;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RefineryUtilities;

public class GUI extends javax.swing.JFrame
{

public GUI()
{
    //add side text area to display details, when needed
    jTextArea_Details = new JTextPane[chartPanelCount];

    //initialize objects to hold histogram data per chart
    histDataset = new HistogramDataset[chartPanelCount];

    //create icons and objects required for each graph panel
    for (int i = 0; i < chartPanelCount; i++)
    {
        graphMenuList.add(i, new ArrayList<JMenuItem>());
        legendList.add(i, new ArrayList<String>());
        histDataset[i] = new HistogramDataset();
    }

    //initialize all GUI components, this function is auto-generated by netbeans based on GUI design
    initComponents();

    //List of colors to draw graph, color sequence is selected in such a way that multiple lines are easily recognizable
    ChartManager.initializeColorArray();

    //remove north pane from internal frame of chart
    BasicInternalFrameUI ui = (BasicInternalFrameUI) jInternalFrame_graph.getUI();
    ui.setNorthPane(null);
    //ui.setSouthPane(null);

    //code to add blank chart panels to the internal frame
    ChartManager.BuildChartPanel(seriesCollection, jFreeChart, chartPanel, chartPanelCount);
    addChartPanelsToFrame();
    addListenersToJFreeChart();

    //scroll bar width and properties
    jScrollPane_details.getVerticalScrollBar().setPreferredSize(new Dimension(17, 0));
    jScrollPane_details.getVerticalScrollBar().setUnitIncrement(20);

    //add text fields to GUI
    initializeJTextFields_Details();

    //add small icons inbetween text field and graph
    addChartIcons();

    //arrays <chartHeightMap> to hold height of each chart, 
    //array <chartHeightMap_cumulativeTotal> to hold cumulative total for efficient computation
    chartHeightMap[0] = 150;
    chartHeightMap_cumulativeTotal[0] = 0;
    for (int i = 1; i < chartPanelCount; i++)
    {
        chartHeightMap[i] = 150;
        chartHeightMap_cumulativeTotal[i] = chartHeightMap_cumulativeTotal[i - 1] + chartHeightMap[i - 1];
    }

    //code to sync scrolling of graph and details
    jScrollPane_details.getVerticalScrollBar().setModel(jScrollPane_graphing.getVerticalScrollBar().getModel());
    jScrollPane_graphing.getVerticalScrollBar().setModel(jScrollPane_details.getVerticalScrollBar().getModel());

    //code to call resize function at start of app , on maximize , and correctly everytime needed
    doAutoAdjustComponentsOnResize();

    //get location of current executable on the file system
    String s = getClass().getProtectionDomain().getCodeSource().getLocation().getPath().replace('/', '\\');
    toolPath = s.substring(1, s.length() - 14);

    //create Temp folder besides executables
    tempFolderPath = toolPath + "Temp\\";
    incSize[0].doClick();
    incSize[0].doClick();
    incSize[0].doClick();
    incSize[0].doClick();

    customizeRightClickMenu();

    // here we are just initializing an external plugin manager library
    PluginManager pm = PluginManagerFactory.createPluginManager();
    System.out.println(new File(GUI.toolPath + "plugins/").toString());

    try
    {
        pm.addPluginsFrom(new File(GUI.toolPath + "plugins/").toURL().toURI());
    } catch (MalformedURLException | URISyntaxException ex)
    {
        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
    }
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel_optionAndSlider = new javax.swing.JPanel();
        jPanel_slider = new javax.swing.JPanel();
        jButton_hideDetails = new javax.swing.JButton();
        jButton_hideOptions = new javax.swing.JButton();
        jPanel_options = new javax.swing.JPanel();
        jButton_logFile = new javax.swing.JButton();
        jButton_LogDir = new javax.swing.JButton();
        jButton_addLogDir = new javax.swing.JButton();
        jLabel_logDir = new javax.swing.JLabel();
        jLabel_compareLog = new javax.swing.JLabel();
        jPanel_zoom = new javax.swing.JPanel();
        jButton_outHorizantal = new javax.swing.JButton();
        jButton_autoVertical = new javax.swing.JButton();
        jLabel_verticalAxis = new javax.swing.JLabel();
        jButton_autoHorizantal = new javax.swing.JButton();
        jLabel_bothAxis = new javax.swing.JLabel();
        jButton_outBoth = new javax.swing.JButton();
        jLabel_HorizantalAxis = new javax.swing.JLabel();
        zoom_title = new javax.swing.JLabel();
        jButton_autoBoth = new javax.swing.JButton();
        jButton_outvertical = new javax.swing.JButton();
        jCheckBox_zoomSync = new javax.swing.JCheckBox();
        jPanel_quickoptions = new javax.swing.JPanel();
        jButton_cleargraph = new javax.swing.JButton();
        jButton_pdf = new javax.swing.JButton();
        jButton_refresh = new javax.swing.JButton();
        jLabel_zoomTitle = new javax.swing.JLabel();
        jLabel_logFile = new javax.swing.JLabel();
        jLabel_zoomTitle1 = new javax.swing.JLabel();
        jScrollPane_graphing = new javax.swing.JScrollPane();
        jInternalFrame_graph = new javax.swing.JInternalFrame();
        jScrollPane_details = new javax.swing.JScrollPane();
        jPanel_details = new javax.swing.JPanel();
        jPanel_icons = new javax.swing.JPanel();
        jPanel_text = new javax.swing.JPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu_file = new javax.swing.JMenu();
        jMenuItem_loaddataFile = new javax.swing.JMenuItem();
        jMenuItem_loadDir = new javax.swing.JMenuItem();
        jMenuItem_savePdf = new javax.swing.JMenuItem();
        jMenuItem_saveJPG = new javax.swing.JMenuItem();
        jMenuItem_Print = new javax.swing.JMenuItem();
        jMenu_plugin = new javax.swing.JMenu();
        jRadioButtonMenuItem_serverLogs = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_webserver = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_airPollution = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_waterLevel = new javax.swing.JRadioButtonMenuItem();
        jMenu_refresh = new javax.swing.JMenu();
        jMenuItem_refresh = new javax.swing.JMenuItem();
        jMenuItem_clearGraph = new javax.swing.JMenuItem();
        jMenuItem_tcToolbar = new javax.swing.JMenuItem();
        jMenuItem_tcRightpanel = new javax.swing.JMenuItem();
        jMenu_help = new javax.swing.JMenu();
        jMenuItem_about = new javax.swing.JMenuItem();
        jMenuItem_docAndSupport = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        jPanel_optionAndSlider.setBackground(new java.awt.Color(152, 175, 199));
        jPanel_optionAndSlider.setName(""); // NOI18N
        jPanel_optionAndSlider.setPreferredSize(new java.awt.Dimension(1000, 200));
        jPanel_optionAndSlider.setLayout(new java.awt.BorderLayout());

        jPanel_slider.setBackground(new java.awt.Color(152, 175, 199));
        jPanel_slider.setPreferredSize(new java.awt.Dimension(2000, 50));

        jButton_hideDetails.setBackground(new java.awt.Color(152, 175, 199));
        jButton_hideDetails.setForeground(new java.awt.Color(152, 175, 199));
        jButton_hideDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/8.png"))); // NOI18N
        jButton_hideDetails.setBorder(null);
        jButton_hideDetails.setBorderPainted(false);
        jButton_hideDetails.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/18.png"))); // NOI18N
        jButton_hideDetails.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_hideDetailsActionPerformed(evt);
            }
        });

        jButton_hideOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/1up.png"))); // NOI18N
        jButton_hideOptions.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/up.png"))); // NOI18N
        jButton_hideOptions.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_hideOptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_sliderLayout = new javax.swing.GroupLayout(jPanel_slider);
        jPanel_slider.setLayout(jPanel_sliderLayout);
        jPanel_sliderLayout.setHorizontalGroup(
            jPanel_sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_sliderLayout.createSequentialGroup()
                .addComponent(jButton_hideOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 774, Short.MAX_VALUE)
                .addComponent(jButton_hideDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186))
        );
        jPanel_sliderLayout.setVerticalGroup(
            jPanel_sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_sliderLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel_sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_hideDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_hideOptions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel_optionAndSlider.add(jPanel_slider, java.awt.BorderLayout.SOUTH);

        jPanel_options.setBackground(new java.awt.Color(152, 175, 199));
        jPanel_options.setPreferredSize(new java.awt.Dimension(2000, 150));
        jPanel_options.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_logFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_logFile.setText("Process Log File");
        jButton_logFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_logFileActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_logFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 120, -1));

        jButton_LogDir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_LogDir.setText("Load Directory");
        jButton_LogDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_LogDirActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_LogDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 120, -1));

        jButton_addLogDir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_addLogDir.setText("Add Directory");
        jButton_addLogDir.setToolTipText("Select new log dir to compare results");
        jButton_addLogDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_addLogDirActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_addLogDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 120, 120, -1));

        jLabel_logDir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_logDir.setText("Log Dir:");
        jLabel_logDir.setMaximumSize(new java.awt.Dimension(400, 15));
        jLabel_logDir.setName(""); // NOI18N
        jLabel_logDir.setPreferredSize(new java.awt.Dimension(400, 15));
        jPanel_options.add(jLabel_logDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 80, -1, 20));

        jLabel_compareLog.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_compareLog.setText("Compare Log:");
        jLabel_compareLog.setMaximumSize(new java.awt.Dimension(400, 15));
        jLabel_compareLog.setName(""); // NOI18N
        jLabel_compareLog.setPreferredSize(new java.awt.Dimension(400, 15));
        jPanel_options.add(jLabel_compareLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 120, -1, 20));

        jPanel_zoom.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));

        jButton_outHorizantal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_outHorizantal.setText("Zoom Out");
        jButton_outHorizantal.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_outHorizantalActionPerformed(evt);
            }
        });

        jButton_autoVertical.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_autoVertical.setText("Auto Range");
        jButton_autoVertical.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_autoVerticalActionPerformed(evt);
            }
        });

        jLabel_verticalAxis.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_verticalAxis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_verticalAxis.setText("Vertical Axis");

        jButton_autoHorizantal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_autoHorizantal.setText("Auto Range");
        jButton_autoHorizantal.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_autoHorizantalActionPerformed(evt);
            }
        });

        jLabel_bothAxis.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_bothAxis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_bothAxis.setText("Both Axis");

        jButton_outBoth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_outBoth.setText("Zoom Out");
        jButton_outBoth.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_outBothActionPerformed(evt);
            }
        });

        jLabel_HorizantalAxis.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_HorizantalAxis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_HorizantalAxis.setText("Horizontal Axis");

        zoom_title.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        zoom_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zoom_title.setText("Zoom Options");

        jButton_autoBoth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_autoBoth.setText("Auto Range");
        jButton_autoBoth.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_autoBothActionPerformed(evt);
            }
        });

        jButton_outvertical.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_outvertical.setText("Zoom Out");
        jButton_outvertical.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_outverticalActionPerformed(evt);
            }
        });

        jCheckBox_zoomSync.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox_zoomSync.setText("Zoom Sync");
        jCheckBox_zoomSync.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox_zoomSyncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_zoomLayout = new javax.swing.GroupLayout(jPanel_zoom);
        jPanel_zoom.setLayout(jPanel_zoomLayout);
        jPanel_zoomLayout.setHorizontalGroup(
            jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_zoomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_zoomLayout.createSequentialGroup()
                        .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_outBoth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_autoBoth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_bothAxis, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_outvertical, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_verticalAxis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_autoVertical)))
                    .addGroup(jPanel_zoomLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(zoom_title, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox_zoomSync, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_outHorizantal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_autoHorizantal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_HorizantalAxis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_zoomLayout.setVerticalGroup(
            jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_zoomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zoom_title)
                    .addComponent(jCheckBox_zoomSync))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_verticalAxis)
                    .addComponent(jLabel_HorizantalAxis)
                    .addComponent(jLabel_bothAxis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_autoBoth)
                    .addComponent(jButton_autoVertical)
                    .addComponent(jButton_autoHorizantal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_zoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_outBoth)
                    .addComponent(jButton_outvertical)
                    .addComponent(jButton_outHorizantal))
                .addContainerGap())
        );

        jPanel_options.add(jPanel_zoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 11, -1, 139));

        jPanel_quickoptions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));

        jButton_cleargraph.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_cleargraph.setText("Clear Graph");
        jButton_cleargraph.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_cleargraphActionPerformed(evt);
            }
        });

        jButton_pdf.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_pdf.setText("Quick PDF");
        jButton_pdf.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_pdfActionPerformed(evt);
            }
        });

        jButton_refresh.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_refresh.setText("Refresh");
        jButton_refresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton_refreshActionPerformed(evt);
            }
        });

        jLabel_zoomTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_zoomTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_zoomTitle.setText("Quick Options");

        javax.swing.GroupLayout jPanel_quickoptionsLayout = new javax.swing.GroupLayout(jPanel_quickoptions);
        jPanel_quickoptions.setLayout(jPanel_quickoptionsLayout);
        jPanel_quickoptionsLayout.setHorizontalGroup(
            jPanel_quickoptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_quickoptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_quickoptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_zoomTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_quickoptionsLayout.createSequentialGroup()
                        .addComponent(jButton_cleargraph, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_quickoptionsLayout.createSequentialGroup()
                        .addGroup(jPanel_quickoptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_pdf, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel_quickoptionsLayout.setVerticalGroup(
            jPanel_quickoptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_quickoptionsLayout.createSequentialGroup()
                .addComponent(jLabel_zoomTitle)
                .addGap(12, 12, 12)
                .addComponent(jButton_refresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_cleargraph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_pdf)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel_options.add(jPanel_quickoptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, 140));

        jLabel_logFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_logFile.setText("Log File:");
        jLabel_logFile.setMaximumSize(new java.awt.Dimension(400, 15));
        jLabel_logFile.setName(""); // NOI18N
        jLabel_logFile.setPreferredSize(new java.awt.Dimension(400, 15));
        jPanel_options.add(jLabel_logFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 40, -1, 20));

        jLabel_zoomTitle1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_zoomTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_zoomTitle1.setText("Input Data Selection");
        jPanel_options.add(jLabel_zoomTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, -1));

        jPanel_optionAndSlider.add(jPanel_options, java.awt.BorderLayout.CENTER);

        jScrollPane_graphing.setBackground(new java.awt.Color(0, 204, 102));
        jScrollPane_graphing.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jScrollPane_graphing.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane_graphing.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jInternalFrame_graph.setBorder(null);
        jInternalFrame_graph.setMaximizable(true);
        jInternalFrame_graph.setPreferredSize(new java.awt.Dimension(1000, 3000));
        jInternalFrame_graph.setRequestFocusEnabled(false);
        jInternalFrame_graph.setVisible(true);
        jInternalFrame_graph.getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        jScrollPane_graphing.setViewportView(jInternalFrame_graph);
        try
        {
            jInternalFrame_graph.setMaximum(true);
        } catch (java.beans.PropertyVetoException e1)
        {
            e1.printStackTrace();
        }

        jScrollPane_details.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        jScrollPane_details.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane_details.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel_details.setBackground(new java.awt.Color(152, 175, 199));
        jPanel_details.setPreferredSize(new java.awt.Dimension(189, 3000));

        jPanel_icons.setBackground(new java.awt.Color(152, 175, 199));

        javax.swing.GroupLayout jPanel_iconsLayout = new javax.swing.GroupLayout(jPanel_icons);
        jPanel_icons.setLayout(jPanel_iconsLayout);
        jPanel_iconsLayout.setHorizontalGroup(
            jPanel_iconsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        jPanel_iconsLayout.setVerticalGroup(
            jPanel_iconsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel_text.setBackground(new java.awt.Color(152, 175, 199));
        jPanel_text.setPreferredSize(new java.awt.Dimension(0, 3000));
        jPanel_text.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        javax.swing.GroupLayout jPanel_detailsLayout = new javax.swing.GroupLayout(jPanel_details);
        jPanel_details.setLayout(jPanel_detailsLayout);
        jPanel_detailsLayout.setHorizontalGroup(
            jPanel_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_detailsLayout.createSequentialGroup()
                .addComponent(jPanel_icons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_text, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );
        jPanel_detailsLayout.setVerticalGroup(
            jPanel_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_icons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_text, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane_details.setViewportView(jPanel_details);

        jMenuBar.setBorderPainted(false);

        jMenu_file.setText("File");
        jMenu_file.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenu_fileMouseClicked(evt);
            }
        });

        jMenuItem_loaddataFile.setText("Load Data File");
        jMenuItem_loaddataFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_loaddataFileActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_loaddataFile);

        jMenuItem_loadDir.setText("Load Log Dir");
        jMenuItem_loadDir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_loadDirActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_loadDir);

        jMenuItem_savePdf.setText("Save as PDF");
        jMenuItem_savePdf.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_savePdfActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_savePdf);

        jMenuItem_saveJPG.setText("Save as JPG");
        jMenuItem_saveJPG.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_saveJPGActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_saveJPG);

        jMenuItem_Print.setText("Print");
        jMenuItem_Print.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_PrintActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_Print);

        jMenuBar.add(jMenu_file);

        jMenu_plugin.setText("Plugin");
        jMenu_plugin.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenu_pluginMouseClicked(evt);
            }
        });

        jRadioButtonMenuItem_serverLogs.setText("Server Logs");
        jMenu_plugin.add(jRadioButtonMenuItem_serverLogs);

        buttonGroup1.add(jRadioButtonMenuItem_webserver);
        jRadioButtonMenuItem_webserver.setText("Linux OS logs");
        jRadioButtonMenuItem_webserver.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonMenuItem_webserverActionPerformed(evt);
            }
        });
        jMenu_plugin.add(jRadioButtonMenuItem_webserver);

        jRadioButtonMenuItem_airPollution.setSelected(true);
        jRadioButtonMenuItem_airPollution.setText("Air Pollution Logs");
        jRadioButtonMenuItem_airPollution.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonMenuItem_airPollutionActionPerformed(evt);
            }
        });
        jMenu_plugin.add(jRadioButtonMenuItem_airPollution);

        buttonGroup1.add(jRadioButtonMenuItem_waterLevel);
        jRadioButtonMenuItem_waterLevel.setText("Water Level logs");
        jRadioButtonMenuItem_waterLevel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonMenuItem_waterLevelActionPerformed(evt);
            }
        });
        jMenu_plugin.add(jRadioButtonMenuItem_waterLevel);

        jMenuBar.add(jMenu_plugin);

        jMenu_refresh.setText("Options");

        jMenuItem_refresh.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem_refresh.setText("Refresh");
        jMenuItem_refresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_refreshActionPerformed(evt);
            }
        });
        jMenu_refresh.add(jMenuItem_refresh);

        jMenuItem_clearGraph.setText("Clear Graph");
        jMenuItem_clearGraph.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_clearGraphActionPerformed(evt);
            }
        });
        jMenu_refresh.add(jMenuItem_clearGraph);

        jMenuItem_tcToolbar.setText("Toggle Collapse Toolbar ");
        jMenuItem_tcToolbar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_tcToolbarActionPerformed(evt);
            }
        });
        jMenu_refresh.add(jMenuItem_tcToolbar);

        jMenuItem_tcRightpanel.setText("Toggle Collapse Right Panel");
        jMenuItem_tcRightpanel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_tcRightpanelActionPerformed(evt);
            }
        });
        jMenu_refresh.add(jMenuItem_tcRightpanel);

        jMenuBar.add(jMenu_refresh);

        jMenu_help.setText("Help");

        jMenuItem_about.setText("About");
        jMenuItem_about.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_aboutActionPerformed(evt);
            }
        });
        jMenu_help.add(jMenuItem_about);

        jMenuItem_docAndSupport.setText("Doc and Support");
        jMenuItem_docAndSupport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_docAndSupportActionPerformed(evt);
            }
        });
        jMenu_help.add(jMenuItem_docAndSupport);

        jMenuBar.add(jMenu_help);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane_graphing)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane_details))
                    .addComponent(jPanel_optionAndSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_optionAndSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane_graphing)
                    .addComponent(jScrollPane_details))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_hideOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hideOptionsActionPerformed
        switchOptionsVisibility();
        resizeComponents();
        maximizeScreenCorrectly();
    }//GEN-LAST:event_jButton_hideOptionsActionPerformed

    private void jButton_hideDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hideDetailsActionPerformed
        switchDetailsVisibility();
        resizeComponents();
        maximizeScreenCorrectly();
    }//GEN-LAST:event_jButton_hideDetailsActionPerformed

    private void jButton_autoVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_autoVerticalActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                chartPanel[i].restoreAutoRangeBounds();
            }
        }
        else
        {
            chartPanel[0].restoreAutoRangeBounds();
        }
    }//GEN-LAST:event_jButton_autoVerticalActionPerformed

    private void jMenuItem_loadDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_loadDirActionPerformed
        LoadDir_doAction();
        jLabel_logDir.setText("Log Dir: " + selectedDir1.toString());
    }//GEN-LAST:event_jMenuItem_loadDirActionPerformed

    private void jMenu_fileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu_fileMouseClicked
        resizeComponents();
    }//GEN-LAST:event_jMenu_fileMouseClicked

    private void jButton_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_pdfActionPerformed
        String newsavedPDFPath = savePDFButtonClick();
        openPDFfile(newsavedPDFPath);
    }//GEN-LAST:event_jButton_pdfActionPerformed

    private void jButton_autoHorizantalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_autoHorizantalActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                chartPanel[i].restoreAutoDomainBounds();
            }
        }
        else
        {
            chartPanel[0].restoreAutoDomainBounds();
        }
    }//GEN-LAST:event_jButton_autoHorizantalActionPerformed

    private void jButton_autoBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_autoBothActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                chartPanel[i].restoreAutoBounds();
            }
        }
        else
        {
            chartPanel[0].restoreAutoBounds();
        }
    }//GEN-LAST:event_jButton_autoBothActionPerformed

    private void jCheckBox_zoomSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_zoomSyncActionPerformed
        zoomSync = !zoomSync;
    }//GEN-LAST:event_jCheckBox_zoomSyncActionPerformed

    private void jButton_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_refreshActionPerformed
        maximizeScreenCorrectly();
    }//GEN-LAST:event_jButton_refreshActionPerformed

    private void jButton_outBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_outBothActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                JPopupMenu popupMenu = chartPanel[i].getPopupMenu();
                JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
                JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(0);
                zoomboth.doClick();
            }
        }
        else
        {
            JPopupMenu popupMenu = chartPanel[0].getPopupMenu();
            JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
            JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(0);
            zoomboth.doClick();
        }
    }//GEN-LAST:event_jButton_outBothActionPerformed

    private void jButton_outverticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_outverticalActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                JPopupMenu popupMenu = chartPanel[i].getPopupMenu();
                JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
                JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(3);
                zoomboth.doClick();
            }
        }
        else
        {
            JPopupMenu popupMenu = chartPanel[0].getPopupMenu();
            JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
            JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(3);
            zoomboth.doClick();
        }
    }//GEN-LAST:event_jButton_outverticalActionPerformed

    private void jButton_outHorizantalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_outHorizantalActionPerformed
        if (zoomSync)
        {
            for (int i = 0; i < chartPanelCount; i++)
            {
                JPopupMenu popupMenu = chartPanel[i].getPopupMenu();
                JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
                JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(2);
                zoomboth.doClick();
            }
        }
        else
        {
            JPopupMenu popupMenu = chartPanel[0].getPopupMenu();
            JMenu selectDataMenu = (JMenu) popupMenu.getComponent(8);//this is the zoom out option
            JMenuItem zoomboth = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(2);
            zoomboth.doClick();
        }
    }//GEN-LAST:event_jButton_outHorizantalActionPerformed

    private void jButton_cleargraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cleargraphActionPerformed
        for (int i = 0; i < chartPanelCount; i++)
        {
            seriesCollection[i].removeAllSeries();
            textArea_text[i] = "";
            jTextArea_Details[i].setText(String.valueOf(i));
            histDataset[chartPanelCount] = null;
            histDataset[chartPanelCount] = new HistogramDataset();
        }
    }//GEN-LAST:event_jButton_cleargraphActionPerformed

    private void jButton_logFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_logFileActionPerformed
        if (LoadLog_doAction())
        {
            jLabel_logFile.setText("Log File: " + selectedLogFile.toString());
        }
    }//GEN-LAST:event_jButton_logFileActionPerformed

    private void jButton_LogDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LogDirActionPerformed
        if (LoadDir_doAction())
        {
            jLabel_logDir.setText("Log Dir: " + selectedDir1.toString());
        }
    }//GEN-LAST:event_jButton_LogDirActionPerformed

    private void jButton_addLogDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addLogDirActionPerformed
        if (LoadDir_doAction())
        {
            jLabel_compareLog.setText("Compare Log: " + selectedDir1.toString());
        }
    }//GEN-LAST:event_jButton_addLogDirActionPerformed

    private void jMenuItem_savePdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_savePdfActionPerformed
        String newsavedPDFPath = savePDFButtonClick();
        openPDFfile(newsavedPDFPath);
    }//GEN-LAST:event_jMenuItem_savePdfActionPerformed

    private void jMenuItem_saveJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_saveJPGActionPerformed
        JPopupMenu popupMenu = chartPanel[0].getPopupMenu();
        JMenu selectDataMenu = (JMenu) popupMenu.getComponent(3);
        JMenuItem save = (JMenuItem) selectDataMenu.getPopupMenu().getComponent(0);
        save.doClick();
    }//GEN-LAST:event_jMenuItem_saveJPGActionPerformed

    private void jMenuItem_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_PrintActionPerformed
        JPopupMenu popupMenu = chartPanel[0].getPopupMenu();
        JMenuItem print = (JMenuItem) popupMenu.getComponent(5);
        print.doClick();
    }//GEN-LAST:event_jMenuItem_PrintActionPerformed

    private void jMenuItem_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_refreshActionPerformed
        maximizeScreenCorrectly();
    }//GEN-LAST:event_jMenuItem_refreshActionPerformed

    private void jMenuItem_loaddataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_loaddataFileActionPerformed
        if (LoadLog_doAction())
        {
            jLabel_logFile.setText("Log File: " + selectedLogFile.toString());
        }
    }//GEN-LAST:event_jMenuItem_loaddataFileActionPerformed

    private void jMenuItem_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_aboutActionPerformed
        JOptionPane.showMessageDialog(null, " GLASS(Graphical Log Analysis Software as Service) \n Version: 1.0 \n Developed by: Pooja Gupte \n Contact: poojagupte92@gmail.com ", "About - GLASS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem_aboutActionPerformed

    private void jMenuItem_clearGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_clearGraphActionPerformed
        for (int i = 0; i < chartPanelCount; i++)
        {
            seriesCollection[i].removeAllSeries();
            textArea_text[i] = "";
            jTextArea_Details[i].setText(String.valueOf(i));
        }
    }//GEN-LAST:event_jMenuItem_clearGraphActionPerformed

    private void jMenuItem_tcToolbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_tcToolbarActionPerformed
        switchOptionsVisibility();
        resizeComponents();
    }//GEN-LAST:event_jMenuItem_tcToolbarActionPerformed

    private void jMenuItem_tcRightpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_tcRightpanelActionPerformed
        switchDetailsVisibility();
        resizeComponents();
    }//GEN-LAST:event_jMenuItem_tcRightpanelActionPerformed

    private void jMenuItem_docAndSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_docAndSupportActionPerformed
        openPDFfile(GUI.toolPath + "\\UserManual.pdf");
    }//GEN-LAST:event_jMenuItem_docAndSupportActionPerformed

    private void jMenu_pluginMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jMenu_pluginMouseClicked
    {//GEN-HEADEREND:event_jMenu_pluginMouseClicked
        resizeComponents();
    }//GEN-LAST:event_jMenu_pluginMouseClicked

    private void jRadioButtonMenuItem_webserverActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonMenuItem_webserverActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonMenuItem_webserverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMenuItem_webserverActionPerformed

    private void jRadioButtonMenuItem_airPollutionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonMenuItem_airPollutionActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonMenuItem_airPollutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMenuItem_airPollutionActionPerformed

    private void jRadioButtonMenuItem_waterLevelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonMenuItem_waterLevelActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonMenuItem_waterLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMenuItem_waterLevelActionPerformed

//variables related to jfreechart
public int chartPanelCount = 20;
public XYSeriesCollection seriesCollection[] = new XYSeriesCollection[chartPanelCount];
public JFreeChart jFreeChart[] = new JFreeChart[chartPanelCount];
public ChartPanel chartPanel[] = new ChartPanel[chartPanelCount];
//flags for gui state
Boolean optionsVisibility = true;
Boolean detailsVisibility = true;
//buttons in icon panel
private javax.swing.JButton incSize[] = new JButton[chartPanelCount];
private javax.swing.JButton decSize[] = new JButton[chartPanelCount];
private javax.swing.JButton histogram[] = new JButton[chartPanelCount];
private javax.swing.JButton selectGraph[] = new JButton[chartPanelCount];
//text area
public static JTextPane jTextArea_Details[];
//for maintaining the height value of each graph panel
int chartHeightMap[] = new int[chartPanelCount];
int chartHeightMap_cumulativeTotal[] = new int[chartPanelCount];
//storing selected directories
File selectedDir1;
File selectedLogFile;
ArrayList<String> graphFileList = new ArrayList<>();
ArrayList<ArrayList<JMenuItem>> graphMenuList = new ArrayList<>();
public static String toolPath = "";
String tempFolderPath = "";
//color
Color appDefaultBackgroung = new Color(152, 175, 199);
//to store copy of text area
String[] textArea_text = new String[chartPanelCount];
//flag to chek the selection of auto range option
boolean zoomSync = false;

//plugins
LinuxOSPlugin webServerPlugin = new LinuxOSPlugin();

//new Plugins
ServerLogPlugin serverLogPlugin = new ServerLogPlugin();
WaterLevelPlugin waterLevelPlugin = new WaterLevelPlugin();
AirPollutionLogsPlugin airPollutionLogsPlugin = new AirPollutionLogsPlugin();

//histogram stats related variables
ArrayList<ArrayList<String>> legendList = new ArrayList<>(chartPanelCount);
HistogramDataset[] histDataset;
double minValue[][] = new double[chartPanelCount][20];
double maxValue[][] = new double[chartPanelCount][20];
double sumValue[][] = new double[chartPanelCount][20];
double meanValue[][] = new double[chartPanelCount][20];
double standard_deviation[][] = new double[chartPanelCount][20];


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton_LogDir;
    private javax.swing.JButton jButton_addLogDir;
    private javax.swing.JButton jButton_autoBoth;
    private javax.swing.JButton jButton_autoHorizantal;
    private javax.swing.JButton jButton_autoVertical;
    private javax.swing.JButton jButton_cleargraph;
    private javax.swing.JButton jButton_hideDetails;
    private javax.swing.JButton jButton_hideOptions;
    private javax.swing.JButton jButton_logFile;
    private javax.swing.JButton jButton_outBoth;
    private javax.swing.JButton jButton_outHorizantal;
    private javax.swing.JButton jButton_outvertical;
    private javax.swing.JButton jButton_pdf;
    private javax.swing.JButton jButton_refresh;
    private javax.swing.JCheckBox jCheckBox_zoomSync;
    private javax.swing.JInternalFrame jInternalFrame_graph;
    private javax.swing.JLabel jLabel_HorizantalAxis;
    private javax.swing.JLabel jLabel_bothAxis;
    private javax.swing.JLabel jLabel_compareLog;
    private javax.swing.JLabel jLabel_logDir;
    private javax.swing.JLabel jLabel_logFile;
    private javax.swing.JLabel jLabel_verticalAxis;
    private javax.swing.JLabel jLabel_zoomTitle;
    private javax.swing.JLabel jLabel_zoomTitle1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItem_Print;
    private javax.swing.JMenuItem jMenuItem_about;
    private javax.swing.JMenuItem jMenuItem_clearGraph;
    private javax.swing.JMenuItem jMenuItem_docAndSupport;
    private javax.swing.JMenuItem jMenuItem_loadDir;
    private javax.swing.JMenuItem jMenuItem_loaddataFile;
    private javax.swing.JMenuItem jMenuItem_refresh;
    private javax.swing.JMenuItem jMenuItem_saveJPG;
    private javax.swing.JMenuItem jMenuItem_savePdf;
    private javax.swing.JMenuItem jMenuItem_tcRightpanel;
    private javax.swing.JMenuItem jMenuItem_tcToolbar;
    private javax.swing.JMenu jMenu_file;
    private javax.swing.JMenu jMenu_help;
    private javax.swing.JMenu jMenu_plugin;
    private javax.swing.JMenu jMenu_refresh;
    private javax.swing.JPanel jPanel_details;
    private javax.swing.JPanel jPanel_icons;
    private javax.swing.JPanel jPanel_optionAndSlider;
    private javax.swing.JPanel jPanel_options;
    private javax.swing.JPanel jPanel_quickoptions;
    private javax.swing.JPanel jPanel_slider;
    private javax.swing.JPanel jPanel_text;
    private javax.swing.JPanel jPanel_zoom;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_airPollution;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_serverLogs;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_waterLevel;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_webserver;
    private javax.swing.JScrollPane jScrollPane_details;
    private javax.swing.JScrollPane jScrollPane_graphing;
    private javax.swing.JLabel zoom_title;
    // End of variables declaration//GEN-END:variables

//function to resize and update the GUI on every redesign event.    
public void resizeComponents_webLookandfeel()
{

    int frameWidth = this.getWidth();
    int frameHeight = this.getHeight();
    int eachChartWidth = 300;
    int topOptionsHeight = 200;
    int sliderHeight = 50;
    int scrollBarWidth = 20;
    int iconsSpaceWidth = 24;
    int verticalExtras = 65;
    int horixantalExtras = 60;
    int totalGraphPageHt = chartHeightMap_cumulativeTotal[chartPanelCount - 1] + chartHeightMap[chartPanelCount - 1];
    int jInternalFrame_graph_width = (int) (frameWidth * 0.80);
    int jInternalFrame_graph_height = (int) (frameHeight - topOptionsHeight - verticalExtras);
    //remove right side details
    if (!detailsVisibility)
    {
        jInternalFrame_graph_width = (int) (frameWidth) - horixantalExtras;
        //TODO add effect on slider width
    }

    if (!optionsVisibility)
    {
        topOptionsHeight = 20;
        jInternalFrame_graph_height = (int) (frameHeight - topOptionsHeight - verticalExtras);
    }

    for (int i = 0; i < chartPanelCount; i++)
    {
        jTextArea_Details[i].setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width - scrollBarWidth - iconsSpaceWidth - 25), chartHeightMap[i]));
        chartPanel[i].setPreferredSize(new Dimension(jInternalFrame_graph_width, chartHeightMap[i]));
        incSize[i].setBounds(5, 5 + chartHeightMap_cumulativeTotal[i], 20, 20);
        decSize[i].setBounds(5, 30 + chartHeightMap_cumulativeTotal[i], 20, 20);
        histogram[i].setBounds(5, 55 + chartHeightMap_cumulativeTotal[i], 20, 20);
        selectGraph[i].setBounds(5, 80 + chartHeightMap_cumulativeTotal[i], 20, 20);
    }

    //graphing area
    jScrollPane_graphing.setBounds(0, topOptionsHeight, jInternalFrame_graph_width, jInternalFrame_graph_height);
    //jScrollPane_graphing.setSize(jInternalFrame_graph_width,jInternalFrame_graph_height);
    jInternalFrame_graph.setSize(jInternalFrame_graph_width, totalGraphPageHt);
    jInternalFrame_graph.setPreferredSize(new Dimension(jInternalFrame_graph_width, totalGraphPageHt));

    //right side details area
    jScrollPane_details.setBounds(jInternalFrame_graph_width, topOptionsHeight, (int) (frameWidth - jInternalFrame_graph_width - scrollBarWidth), jInternalFrame_graph_height);

    jPanel_details.setSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));
    //jPanel_details.setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width ), totalGraphPageHt));
    jPanel_details.setBounds(jInternalFrame_graph_width, topOptionsHeight, (int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt);

    jPanel_text.setMaximumSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));
    jPanel_text.setMinimumSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width - 45), 0));
    jPanel_text.setSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));
    jPanel_text.setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));

    //top area
    jPanel_optionAndSlider.setSize(frameWidth, topOptionsHeight);
    jPanel_options.setSize(frameWidth, topOptionsHeight - sliderHeight);
    jPanel_slider.setSize(frameWidth, sliderHeight);

    //buttons
    jButton_hideOptions.setLocation(jInternalFrame_graph_width - 3, 35);
    jButton_hideDetails.setLocation(jInternalFrame_graph_width - 3 + jButton_hideDetails.getWidth() + 5, 35);
}

public void resizeComponents()
{

    int frameWidth = this.getWidth();
    int frameHeight = this.getHeight();
    int topOptionsHeight = 200;
    int sliderHeight = 50;
    int scrollBarWidth = 17;
    int iconsSpaceWidth = 24;
    int verticalExtras = 50;
    int horixantalExtras = 45;
    int totalGraphPageHt = chartHeightMap_cumulativeTotal[chartPanelCount - 1] + chartHeightMap[chartPanelCount - 1];

    int jInternalFrame_graph_width = (int) (frameWidth * 0.78);
    int jInternalFrame_graph_height = (int) (frameHeight - topOptionsHeight - verticalExtras);
    //remove right side details

    if (!detailsVisibility)
    {
        jInternalFrame_graph_width = (int) (frameWidth) - horixantalExtras;
        //TODO add effect on slider width
    }

    if (!optionsVisibility)
    {
        topOptionsHeight = 20;
        jInternalFrame_graph_height = (int) (frameHeight - topOptionsHeight - verticalExtras);
    }

    for (int i = 0; i < chartPanelCount; i++)
    {
        jTextArea_Details[i].setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width - scrollBarWidth - iconsSpaceWidth - 10), chartHeightMap[i]));
        chartPanel[i].setPreferredSize(new Dimension(jInternalFrame_graph_width, chartHeightMap[i]));
        incSize[i].setBounds(0, 0 + chartHeightMap_cumulativeTotal[i], 20, 20);
        decSize[i].setBounds(0, 25 + chartHeightMap_cumulativeTotal[i], 20, 20);
        histogram[i].setBounds(0, 50 + chartHeightMap_cumulativeTotal[i], 20, 20);
        selectGraph[i].setBounds(0, 75 + chartHeightMap_cumulativeTotal[i], 20, 20);
    }

    //graphing area
    jScrollPane_graphing.setBounds(0, topOptionsHeight, jInternalFrame_graph_width, jInternalFrame_graph_height);
    jScrollPane_graphing.setPreferredSize(new Dimension(jInternalFrame_graph_width, jInternalFrame_graph_height));
    jScrollPane_graphing.setSize(jInternalFrame_graph_width, jInternalFrame_graph_height);
    jInternalFrame_graph.setSize(jInternalFrame_graph_width, totalGraphPageHt);
    jInternalFrame_graph.setPreferredSize(new Dimension(jInternalFrame_graph_width, totalGraphPageHt));

    //right side details area
    jScrollPane_details.setBounds(jInternalFrame_graph_width, topOptionsHeight, (int) (frameWidth - jInternalFrame_graph_width), jInternalFrame_graph_height);
    jScrollPane_details.setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), jInternalFrame_graph_height));

    jPanel_details.setBounds(jInternalFrame_graph_width, topOptionsHeight, (int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt);
    //jPanel_details.setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt)); 

    jPanel_text.setMaximumSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));
    jPanel_text.setMinimumSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width - 45), 0));
    jPanel_text.setSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));
    jPanel_text.setPreferredSize(new Dimension((int) (frameWidth - jInternalFrame_graph_width), totalGraphPageHt));

    //top area
    jPanel_optionAndSlider.setSize(frameWidth, topOptionsHeight);
    jPanel_optionAndSlider.setPreferredSize(new Dimension(frameWidth, topOptionsHeight));

    jPanel_options.setSize(frameWidth, topOptionsHeight - sliderHeight);
    jPanel_options.setPreferredSize(new Dimension(frameWidth, topOptionsHeight - sliderHeight));

    jPanel_slider.setSize(frameWidth, sliderHeight);
    jPanel_slider.setPreferredSize(new Dimension(frameWidth, sliderHeight));

    //buttons
    jButton_hideOptions.setLocation(3, 30);
    jButton_hideDetails.setLocation(jInternalFrame_graph_width - 3, 30);
}

//code to add blank chart panels to the internal frame
private void addChartPanelsToFrame()
{
    for (int i = 0; i < chartPanelCount; i++)
    {
        chartPanel[i].setMinimumDrawWidth(150);
        chartPanel[i].setPreferredSize(new Dimension(1200, 200));
        chartPanel[i].setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.white, Color.white)));
        jInternalFrame_graph.add(chartPanel[i]);
    }
}

private void initializeJTextFields_Details()
{
    for (int i = 0; i < chartPanelCount; i++)
    {
        jTextArea_Details[i] = new JTextPane();
        jTextArea_Details[i].setBackground(Color.white);
        jTextArea_Details[i].setEditable(false);
        jTextArea_Details[i].setForeground(Color.BLACK);
        //jTextArea_Details[i].setLineWrap(true);
        jTextArea_Details[i].setVisible(true);
        jTextArea_Details[i].setPreferredSize(new Dimension(200, 200));
        jTextArea_Details[i].setText(String.valueOf(i));
        jTextArea_Details[i].setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED, appDefaultBackgroung, appDefaultBackgroung)));
        jTextArea_Details[i].setContentType("text/html");
        jPanel_text.add(jTextArea_Details[i]);
        textArea_text[i] = "";
    }
}

private void switchDetailsVisibility()
{
    detailsVisibility = !detailsVisibility;
}

private void switchOptionsVisibility()
{
    optionsVisibility = !optionsVisibility;
}

public static int GetScreenWorkingWidth()
{
    return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
}

public static int GetScreenWorkingHeight()
{
    return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;
}

//add listeners to reside all components on change in screen dimensions
private void doAutoAdjustComponentsOnResize()
{
    this.addComponentListener(new ComponentListener()
    {
    @Override
    public void componentResized(ComponentEvent e)
    {
        resizeComponents();
    }

    @Override
    public void componentMoved(ComponentEvent e)
    {
        resizeComponents();
    }

    @Override
    public void componentShown(ComponentEvent e)
    {
        resizeComponents();
    }

    @Override
    public void componentHidden(ComponentEvent e)
    {
        resizeComponents();
    }

    });

    addWindowStateListener(new WindowAdapter()
    {
    @Override
    public void windowStateChanged(WindowEvent e)
    {
        if (e.getNewState() == JFrame.MAXIMIZED_BOTH)
        {
            maximizeScreenCorrectly();
        }
    }

    });
}

//considering the taskbar position and area befor maximizeing
public void maximizeScreenCorrectly()
{
    GraphicsDevice gd = MouseInfo.getPointerInfo().getDevice();
    Rectangle scrnSiz = gd.getDefaultConfiguration().getBounds();
    setBounds(scrnSiz);
    GraphicsDevice gdDefault = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
    if (gd.getIDstring().equals(gdDefault.getIDstring()))
    {
        Rectangle winSize = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
        setBounds(winSize);
    }
}

//code to create small buttons to put besides the graph and add it to each Graph
private void addChartIcons()
{
    ImageIcon imageIcon1 = new ImageIcon("/glass/1.png");
    ImageIcon imageIcon2 = new ImageIcon("/glass/2.png");
    ImageIcon imageIcon3 = new ImageIcon("/glass/3.png");
    ImageIcon imageIcon4 = new ImageIcon("/glass/4.png");

    for (int i = 0; i < chartPanelCount; i++)
    {
        final int k = i;
        incSize[i] = new JButton("+");
        decSize[i] = new JButton("-");
        histogram[i] = new JButton("H");
        selectGraph[i] = new JButton("P");

        incSize[i].setBackground(new java.awt.Color(152, 175, 199));
        incSize[i].setForeground(new java.awt.Color(0, 0, 0));
        //incSize[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/8.png"))); // NOI18N
        incSize[i].setBorder(null);
        incSize[i].setBorderPainted(false);
        incSize[i].setMinimumSize(new java.awt.Dimension(20, 20));
        incSize[i].setPreferredSize(new java.awt.Dimension(20, 20));
        //incSize[i].setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/18.png"))); // NOI18N
        incSize[i].addActionListener(new java.awt.event.ActionListener()
        {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            chartHeightMap[k] = chartHeightMap[k] + 50;
            for (int i = 1; i < chartPanelCount; i++)
            {//TODO make this i j
                chartHeightMap_cumulativeTotal[i] = chartHeightMap_cumulativeTotal[i - 1] + chartHeightMap[i - 1];
            }
            resizeComponents();
        }

        });

        decSize[i].setBackground(new java.awt.Color(152, 175, 199));
        decSize[i].setForeground(new java.awt.Color(0, 0, 0));
        //decSize[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/8.png"))); // NOI18N
        decSize[i].setBorder(null);
        decSize[i].setBorderPainted(false);
        decSize[i].setMinimumSize(new java.awt.Dimension(20, 20));
        decSize[i].setPreferredSize(new java.awt.Dimension(20, 20));
        //decSize[i].setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/18.png"))); // NOI18N
        decSize[i].addActionListener(new java.awt.event.ActionListener()
        {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            if (chartHeightMap[k] > 100)
            {
                chartHeightMap[k] = chartHeightMap[k] - 50;
                for (int i = 1; i < chartPanelCount; i++)
                {
                    chartHeightMap_cumulativeTotal[i] = chartHeightMap_cumulativeTotal[i - 1] + chartHeightMap[i - 1];
                }
            }
            resizeComponents();
        }

        });

        histogram[i].setBackground(new java.awt.Color(152, 175, 199));
        histogram[i].setForeground(new java.awt.Color(0, 0, 0));
        //histogram[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/8.png"))); // NOI18N
        histogram[i].setBorder(null);
        histogram[i].setBorderPainted(false);
        histogram[i].setMinimumSize(new java.awt.Dimension(20, 20));
        histogram[i].setPreferredSize(new java.awt.Dimension(20, 20));
        //histogram[i].setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/18.png"))); // NOI18N
        histogram[i].addActionListener(new java.awt.event.ActionListener()
        {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            histogram(k);
        }

        });

        selectGraph[i].setBackground(new java.awt.Color(152, 175, 199));
        selectGraph[i].setForeground(new java.awt.Color(0, 0, 0));
        //selectGraph[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/8.png"))); // NOI18N
        selectGraph[i].setBorder(null);
        selectGraph[i].setBorderPainted(false);
        selectGraph[i].setMinimumSize(new java.awt.Dimension(20, 20));
        selectGraph[i].setPreferredSize(new java.awt.Dimension(20, 20));
        //selectGraph.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/glass/18.png"))); // NOI18N
        selectGraph[i].addActionListener(new java.awt.event.ActionListener()
        {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            createPieChart(k);
        }

        });

        jPanel_icons.add(incSize[i]);
        jPanel_icons.add(decSize[i]);
        jPanel_icons.add(histogram[i]);
        jPanel_icons.add(selectGraph[i]);
        incSize[i].setVisible(true);
        decSize[i].setVisible(true);
        histogram[i].setVisible(true);
        selectGraph[i].setVisible(true);

    }
}

private void loadFile()
{
    //todo add code to create config files by defult - done in oracle
    ActionListener actionLister_addPlot = createActionListener_addPlot();
    //search for all files in selected folder.
    Collection files = FileUtils.listFiles(selectedDir1, new RegexFileFilter("^(.*?)"), DirectoryFileFilter.DIRECTORY);
    Iterator iterator = files.iterator();
    //go over each file
    int configFileCount = 0;
    for (int i = 0; i < files.size(); i++)
    {
        String temp = iterator.next().toString();
        //if file there is a config file present, process corresponding data file
        if (temp.contains("_config.txt"))
        {
            String dataFile = temp.substring(0, temp.length() - 11) + ".txt";
            graphFileList.add(dataFile);
            setListOfMenuItems(dataFile, actionLister_addPlot);
            configFileCount++;
        }
    }
    if (configFileCount == 0)
    {
        JOptionPane.showMessageDialog(null, " Config file missing", "ERROR", JOptionPane.WARNING_MESSAGE);
    }
    addmenuItemsToChartPanel();
}

//function that opens a file and reads data and adds it to graph
public void plotFile(String path)
{
    //seperate graph number and path from input argument
    int graphLocation = Integer.parseInt("" + path.charAt(0));
    String correctpath = path.substring(1);
    //create new class to store and load data for a perticular graph 
    TextFileInterface textInterface = new TextFileInterface(correctpath);
    textInterface.readFile();
    textInterface.readConfig();

    try
    {
        //change name of series before adding - 
        textInterface.series.setKey(correctpath);

        //textInterface.series.setKey("test lolo");
        seriesCollection[graphLocation].addSeries(textInterface.series);
        legendList.get(graphLocation).add(textInterface.title);

        histDataset[graphLocation].addSeries(textInterface.title, textInterface.yValues, 10);

        ChartManager.defaultAxisSettings(jFreeChart[graphLocation], seriesCollection[graphLocation], textInterface);

        int count = seriesCollection[graphLocation].getSeriesCount() - 1;
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) jFreeChart[graphLocation].getXYPlot().getRenderer();
        Color colour = (Color) renderer.getSeriesPaint(count);

        if (count == 0)
        {
            setTextArea(jTextArea_Details[graphLocation], textInterface, graphLocation, colour);
        }
        else
        {
            setTextArea_multiple(jTextArea_Details[graphLocation], textInterface, graphLocation, colour);
        }
        doStatisticalAnalysis(textInterface, graphLocation, count);

    } catch (Exception e)
    {
        JOptionPane.showMessageDialog(null, " Trying to add same data again", "ERROR", JOptionPane.WARNING_MESSAGE);
        e.printStackTrace();
    }
}

//to customize right click menu of graph
public void customizeRightClickMenu()
{
    for (int i = 0; i < chartPanelCount; i++)
    {
        JPopupMenu popupMenu = chartPanel[i].getPopupMenu();
        popupMenu.addSeparator();
        popupMenu.add(new JMenu("Add Graph"));
        JMenu selectDataMenu = (JMenu) popupMenu.getComponent(12);//this is the newly added component
        selectDataMenu.setFont(new java.awt.Font("Garamond", java.awt.Font.BOLD, 16));
        ActionListener actionLister_removeAll = createActionListener_removeAll();
        JMenuItem jmenuitem_temp = new JMenuItem("Remove all");
        jmenuitem_temp.setActionCommand("" + i);
        jmenuitem_temp.addActionListener(actionLister_removeAll);
        popupMenu.add(jmenuitem_temp);
    }
}

//add JMenu items to select the data to plot
public void addmenuItemsToChartPanel()
{
    for (int i = 0; i < chartPanelCount; i++)
    {
        JPopupMenu popupMenu = chartPanel[i].getPopupMenu();
        JMenu selectDataMenu = (JMenu) popupMenu.getComponent(12);//this is the newly added component
        for (int j = 0; j < graphMenuList.get(i).size(); j++)
        {
            selectDataMenu.add(graphMenuList.get(i).get(j));
        }
    }
}

//Populates the arraylist holding all the JMenuItems to be added to chart
public void setListOfMenuItems(String dataFile, ActionListener actionLister)
{
    for (int j = 0; j < chartPanelCount; j++)
    {
        JMenuItem jmenuitem_temp = new JMenuItem(dataFile);
        jmenuitem_temp.setActionCommand(j + dataFile);//here j represents which graphthe command belongs to
        jmenuitem_temp.addActionListener(actionLister);
        graphMenuList.get(j).add(jmenuitem_temp);
    }
}

public ActionListener createActionListener_addPlot()
{
    //action listener to plot graph on selecting data set(right click)
    ActionListener actionLister = new ActionListener()
    {
    @Override
    public void actionPerformed(ActionEvent event)
    {
        String command = event.getActionCommand();
        plotFile(command.toString());
    }

    };
    return actionLister;
}

private ActionListener createActionListener_removeAll()
{
    //action listener to remove all graph 
    ActionListener actionLister = new ActionListener()
    {
    @Override
    public void actionPerformed(ActionEvent event)
    {
        String command = event.getActionCommand();
        int graphLocation = Integer.parseInt(command);
        seriesCollection[graphLocation].removeAllSeries();
        textArea_text[graphLocation] = "";
        jTextArea_Details[graphLocation].setText(String.valueOf(graphLocation));
        //TODO remove titles and other suff too
    }

    };
    return actionLister;
}

public String savePDFButtonClick()
{
    int counter = 0;
    for (int i = 0; i < chartPanelCount; i++)
    {
        try
        {
            File file = new File(tempFolderPath + i + ".jpeg");
            ChartUtilities.saveChartAsJPEG(file, 1, jFreeChart[i], 980, 300);
            counter++;
        } catch (IOException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    return (JpegToPDF.convertAndCreate(counter, ""));
}

public void openPDFfile(String createdErrorReportPath)
{
    if (!createdErrorReportPath.equalsIgnoreCase("unknown"))
    {
        try
        {
            File pdfFile = new File(createdErrorReportPath);
            if (pdfFile.exists())
            {

                if (Desktop.isDesktopSupported())
                {
                    Desktop.getDesktop().open(pdfFile);
                }
                else
                {
                    System.out.println("Awt Desktop is not supported!");
                    // jTextField_menuCommands.setText("Awt Desktop is not supported!");
                }
            }
            else
            {
                System.out.println("File is not exists!");
                // jTextField_menuCommands.setText("File is not exists!");
            }
            //jTextField_menuCommands.setText("Done");
            System.out.println("Done");
        } catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }
}

private void setTextArea(JTextPane jTextArea, TextFileInterface tfi, int graphLocation, Color thisColor)
{
    StringBuilder text = new StringBuilder();
    text.append("Title: ").append(tfi.title);
    text.append("<br>");

    text.append("X Axix: ").append(tfi.xLabel);
    text.append("<br>");

    text.append("Y Axix: ").append(tfi.yLabel);
    text.append("<br>");

    text.append("Description: ").append(tfi.tooltip);
    text.append("<br>");

    jTextArea.setText(text.toString());

    String hex = "#" + Integer.toHexString(thisColor.getRGB()).substring(2);
    textArea_text[graphLocation] = "<br><font color=" + hex + ">" + tfi.title + "</font>";
}

private void setTextArea_multiple(JTextPane jTextArea, TextFileInterface textInterface, int graphLocation, Color thisColor)
{
    String initialText = "";
    if (textInterface.color.equalsIgnoreCase("auto"))
    {
        String hex = "#" + Integer.toHexString(thisColor.getRGB()).substring(2);
        initialText = textArea_text[graphLocation] + "<br><font color=" + hex + ">" + textInterface.title + "</font>";
    }
    textArea_text[graphLocation] = initialText;
    jTextArea.setText("<html>" + "Legend:" + initialText + "</html>");
}

public boolean LoadDir_doAction() throws HeadlessException
{
    final JDialog jd = new JDialog();
    File dirInit = null;//to set recent dir TODO add code
    JFileChooser jfc = new JFileChooser();
    jfc.setCurrentDirectory(dirInit);
    jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    jd.addWindowListener(new WindowAdapter()
    {
    @Override
    public void windowGainedFocus(WindowEvent we)
    {
        jd.repaint();
    }

    });
    jd.validate();
    //int result = jfc.showOpenDialog(jd);
    int result = jfc.showDialog(jd, "Select");
    if (result == JFileChooser.APPROVE_OPTION)
    {
        selectedDir1 = jfc.getSelectedFile();
        if (selectedDir1 == null)
        {
            return false;
        }
        loadFile();
        return true;
    }
    return false;
}

private boolean LoadLog_doAction()
{
    final JDialog jd = new JDialog();
    File dirInit = null;//to set recent dir TODO add code
    JFileChooser jfc = new JFileChooser();
    jfc.setCurrentDirectory(dirInit);
    jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    jd.addWindowListener(new WindowAdapter()
    {
    @Override
    public void windowGainedFocus(WindowEvent we)
    {
        jd.repaint();
    }

    });
    jd.validate();
    //int result = jfc.showOpenDialog(jd);
    int result = jfc.showDialog(jd, "Select");
    if (result == JFileChooser.APPROVE_OPTION)
    {
        selectedLogFile = jfc.getSelectedFile();
        if (selectedLogFile == null)
        {
            return false;
        }
        String tempDir = "";
        System.out.println(selectedLogFile);

        if (jRadioButtonMenuItem_waterLevel.isSelected())
        {
            tempDir = waterLevelPlugin.processFile(selectedLogFile.toString());
        }
        else if (jRadioButtonMenuItem_webserver.isSelected())
        {
            tempDir = webServerPlugin.processFile(selectedLogFile.toString());
        }
        //new Plugin
        else if (jRadioButtonMenuItem_serverLogs.isSelected())
        {
            tempDir = serverLogPlugin.processFile(selectedLogFile.toString());
        }
        else if (jRadioButtonMenuItem_airPollution.isSelected())
        {
            tempDir = airPollutionLogsPlugin.processFile(selectedLogFile.toString());
        }
        else
        {
            JOptionPane.showMessageDialog(null, " Plugin not selected", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        System.out.println(tempDir);

        selectedDir1 = new File(tempDir);
        loadFile();
        jLabel_logDir.setText("Log Dir: " + selectedDir1.toString());
        return true;
    }

    return false;
}

public void histogram(int plotno)
{

    Histogram histoGUI = new Histogram(plotno,
                                       legendList,
                                       chartPanelCount,
                                       histDataset,
                                       seriesCollection,
                                       minValue,
                                       maxValue,
                                       sumValue,
                                       meanValue,
                                       standard_deviation);
}

public void doStatisticalAnalysis(TextFileInterface textInterface, int graphLocation, int count)
{
    double updatedLineCnt = textInterface.yValues.length;
    minValue[graphLocation][count] = Statistics.minimumBound(textInterface.yValues);
    maxValue[graphLocation][count] = Statistics.maximumBound(textInterface.yValues);
    sumValue[graphLocation][count] = Statistics.sum(textInterface.yValues);
    meanValue[graphLocation][count] = sumValue[graphLocation][count] / updatedLineCnt;

    XYPlot plot = jFreeChart[graphLocation].getXYPlot();
    standard_deviation[graphLocation][count] = Statistics.standarddeviation(seriesCollection, graphLocation,
                                                                            plot.getDomainAxis().getRange().getLowerBound(),
                                                                            plot.getRangeAxis().getRange().getLowerBound(),
                                                                            plot.getDomainAxis().getRange().getUpperBound(),
                                                                            plot.getRangeAxis().getRange().getUpperBound(),
                                                                            meanValue[graphLocation]);
}

public void createPieChart(int graphLocation)
{
    DefaultPieDataset dataset = new DefaultPieDataset();

    int count = seriesCollection[graphLocation].getSeriesCount() - 1;

    if (count == 0)
    {

        XYSeries series = seriesCollection[graphLocation].getSeries(count);
        double yValues[] = new double[series.getItemCount()];
        for (int i = 0; i < series.getItemCount(); i++)
        {
            yValues[i] = (double) series.getY(i);
        }
        Statistics.mode(yValues);
        double total = 0;
        for (int i = 0; i < 5; i++)
        {
            dataset.setValue(Statistics.keyList[i], Statistics.valueList[i]);
            total = total + Statistics.valueList[i];
        }
        dataset.setValue("Others", yValues.length - (int) total);
    }
    else
    {
        for (int i = 0; i <= count; i++)
        {
            dataset.setValue(legendList.get(graphLocation).get(i), seriesCollection[graphLocation].getSeries(i).getItemCount());
        }
    }

    PieChart demo = new PieChart("Pie Chart", dataset);
    demo.pack();
    RefineryUtilities.centerFrameOnScreen(demo);
    demo.setVisible(true);
    // demo.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
}

public void doZoomSync(ValueAxis axes)
{
    if (zoomSync)
    {
        //TODO add check here to seee if the graph has data before zooming to it
        for (int i = 1; i < chartPanelCount; i++)
        {
            jFreeChart[i].getXYPlot().setDomainAxis(axes);
        }
    }
}

public void addListenersToJFreeChart()
{

    jFreeChart[0].addChangeListener(new ChartChangeListener()
    {
    @Override
    public void chartChanged(ChartChangeEvent cce)
    {
        if (cce.getChart() != null)
        {
            doZoomSync(cce.getChart().getXYPlot().getDomainAxis());
        }
    }

    });

}

}
